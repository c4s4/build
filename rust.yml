# Build Rust project
# Using tool toml installed with `cargo install toml-cli`

default: [lint, fmt]

properties:
  NAME: '={filename(_BASE)}'
  ARGS: []
  TESTS: []
  BIN_DIR: 'target/binaries'
  ARC_DIR: 'target/archive'
  PLUGIN: 'c4s4/build'
  DIST_URL: 'https://sweetohm.net/dist'
  WEB_HOME: 'casa@sweetohm.net:/web/app/dist/={NAME}'
  TARGETS:
    aarch64-unknown-linux-gnu: linux-arm64
    x86_64-unknown-linux-gnu: linux-amd64
    aarch64-apple-darwin: darwin-arm64
    x86_64-apple-darwin: darwin-amd64
    x86_64-pc-windows-gnu: windows-amd64

targets:

  env:
    doc: "Set environment variables"
    steps:
    - if: '_OS == "darwin" && _ARCH == "arm64"'
      then:
      - setenv: 'CROSS_CONTAINER_OPTS'
        value:  '--platform linux/amd64'

  lint:
    depends: env
    doc: "Lint Rust code"
    steps:
    - $: [cargo, check]

  audit:
    doc: "Audit creates for vulnerabilities"
    steps:
    - $: [cargo, audit]

  mod:
    doc: "List Rust modules"
    steps:
    - $: [cargo, modules, structure]

  test:
    doc: "Run Rust tests"
    steps:
    - $: [cargo, test]
      +: =TESTS

  fmt:
    depends: env
    doc: "Format Rust code"
    steps:
    - $: [cargo, fmt]

  build:
    depends: env
    doc: "Build Rust project"
    steps:
    - $: [cargo, build]

  run:
    doc: "Run Rust project"
    steps:
    - $: [cargo, run]
      +: =ARGS

  install:
    depends: env
    doc: "Install Rust binary in ~/.cargo/bin"
    steps:
    - $: [cargo, install, --path, .]

  binaries:
    depends: env
    doc: "Build binaries for all targets"
    steps:
    - mkdir: =BIN_DIR
    - for: target
      in:  =keys(TARGETS)
      do:
      - 'name = TARGETS[target]'
      - print: "Building for target ={name}..."
      - $: [cross, build, --release, --target, =target]
      - copy:  'target/={target}/release/={NAME}'
        tofile: '={BIN_DIR}/={NAME}-={name}'
      - copy:  'target/={target}/release/={NAME}.exe'
        tofile: '={BIN_DIR}/={NAME}-={name}.exe'

  archive:
    depends: [binaries]
    doc: "Generate and archive with binaries for all targets"
    steps:
    - mkdir: =ARC_DIR
    - copy: '={NAME}-*'
      dir: =BIN_DIR
      todir: =ARC_DIR
    - copy: ['README*', 'LICENSE*']
      dir: =_BASE
      todir: =ARC_DIR
    - zip: '*'
      dir: =ARC_DIR
      tofile: 'target/={NAME}.zip'

  release:
    depends: [clean, archive]
    steps:
    - $: [toml, get, Cargo.toml, package.version, --raw]
      1=: version
      1x: true
    - move: 'target/={NAME}.zip'
      tofile: 'target/={NAME}-={version}.zip'
    - if: '_OS == "linux"'
      then:
      - copy: '={NAME}-={version}.zip'
        dir: 'target'
        todir: '~/dsk/'
      else:
      - copy: '={NAME}-={version}.zip'
        dir: 'target'
        todir: '~/Desktop/'
    - copy: '={_REPO}/={PLUGIN}/install'
      todir: =BIN_DIR
    - replace: '={BIN_DIR}/install'
      with:
        $NAME$: =NAME
        $DIST_URL$: =DIST_URL
    - $: 'scp ={BIN_DIR}/* ={WEB_HOME}'
    - $: [git, tag, =version]
    - $: [git, push, --tags]

  clean:
    doc: "Clean generated files"
    steps:
    - $: [cargo, clean]
