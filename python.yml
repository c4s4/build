# NeON Build File (http://github.com/c4s4/neon)

doc: Parent build file for Python projects

default: [format, lint, test]
extends:
- c4s4/build/buildir.yml
- c4s4/build/changelog.yml
- c4s4/build/git.yml
- c4s4/build/archive.yml

properties:
  VENV_DIR:     'venv'
  REQUIREMENTS: 'requirements.txt'
  PYVERSIONS:   ['2', '3']
  YAPFSTYLE:    'google'
  PYTESTFILES:  '*test*.py'
  PYLINTRC:     ~
  PYLINTSRC:    '=filter(find(_BASE, "**/*.py"), VENV_DIR+"/**/*", ".*/**/*")'
  PYARGS:       []
  PYSETUP:      'setup.py'
  ARC_FILES:
  - files:   '**/*'
    dir:     '.'
    exclude: ['={BUILD_DIR}/**/*', '={VENV_DIR}/**/*', '.*/**/*', 'build.yml']
    flat:    false
  PYTOOLS:
  - pylint
  - yapf

environment:
  PYTHONPATH: =_BASE

targets:

  _select_python:
    doc: Select Python version
    steps:
    # make list of available python versions
    - |
      pythons = []
      for version in PYVERSIONS {
        pythons += findinpath("python"+toString(version))
      }
      for i in range(len(pythons)) {
        pythons[i] = followlink(toString(pythons[i]))
      }
    # print found python versions
    - if: len(pythons) > 0
      then:
      - print: 'Found Python versions:'
      - for: i
        in:  range(len(pythons))
        do:
        - print: '={i+1}: ={pythons[i]}'
      # prompt for Python version
      - prompt:  'Please choose your Python version or 0 to type a new path'
        to:      index
        pattern: '^[0-={len(pythons)}]$'
        error:   'Python version must be between 0 and ={len(pythons)}'
      else:
      - 'index = "0"'
    # prompt for Python path if 0 was entered
    - if: index == '0'
      then:
      - prompt: 'Please type path to selected Python binary'
        to:     python
      - if: '!exists(python)'
        then:
        - throw: 'Selected Python path not found'
      else:
      - 'python = pythons[toInt(index)-1]'
    - 'python = followlink(python)'
    - print: 'Selected Python path: ={python}'
    # get Python version
    - $:  [=python, '-V']
      3=: version
    - 'version = version[7:8]'
    - print: 'Python version ={version}'

  init:
    doc: Create virtual environment
    depends: _select_python
    steps:
    - delete: =VENV_DIR
    # create virtual environment
    - if: 'version == "3"'
      then:
      - $: [=python, '-m', 'venv', =VENV_DIR]
      else:
      - $: [=python, '-m', 'virtualenv', =VENV_DIR]
    # install tools
    - call: tools
    # install requirements
    - call: libs
  
  tools:
    doc: Install tools
    steps:
    - $: ['={VENV_DIR}/bin/pip', '-U', 'install']
      +: =PYTOOLS
  
  libs:
    doc: Install requirements
    steps:
    - if: 'exists(REQUIREMENTS)'
      then:
      - $: ['={VENV_DIR}/bin/python', '-m', 'pip', 'install', '-U', '-r', =REQUIREMENTS]
      else:
      - print: 'No requirements file found'
  
  format:
    doc: Format code using yapf
    steps:
    - $: ['={VENV_DIR}/bin/yapf', '-i', '--style', =YAPFSTYLE]
      +: '=filter(find(".", "**/*.py"), "venv/**/*")'

  lint:
    doc: Check code with Pylint
    steps:
    - if: 'PYLINTRC != nil'
      then:
      - $: ['={VENV_DIR}/bin/pylint', '--rcfile=={PYLINTRC}']
        +: =PYLINTSRC
      else:
      - $: ['={VENV_DIR}/bin/pylint']
        +: =PYLINTSRC

  pylintrc:
    doc: Generate Pylint configuration file
    steps:
    - print: 'Generating Pylint configuration in pylintrc file'
    - $: '={VENV_DIR}/bin/pylint --generate-rcfile > pylintrc'
    - print: 'You should set PYLINTRC property with path to this file'

  console:
    doc: Run a Python console in virtual environment
    steps:
    - $: '={VENV_DIR}/bin/python'

  run:
    doc: Run python script
    steps:
    - $: ['={VENV_DIR}/bin/python', =NAME]
      +: PYARGS 

  test:
    doc: Run python tests
    steps:
    - $: ['={VENV_DIR}/bin/python', '-m', 'unittest', 'discover', '--verbose', '-p', =PYTESTFILES]

  cloc:
    doc: Count Python lines of code (calls 'cloc' tool on command line)
    steps:
    - $: ['cloc', '--exclude-dir=={VENV_DIR}', '--include-lang=Python', '.']

  package:
    doc: Generate Python package
    steps:
    - mkdir: =BUILD_DIR
    - copy:  =PYSETUP
      todir: =BUILD_DIR
      flat:  true
    - replace: '={BUILD_DIR}/={filename(PYSETUP)}'
      with:
        $VERSION$: =VERSION
    - $: ['={VENV_DIR}/bin/python', '={BUILD_DIR}/={filename(PYSETUP)}', 'sdist', '--dist-dir', '={BUILD_DIR}']
    - delete: '={replace(NAME, "-", "_")}.egg-info'

  clean:
    doc: Clean generated files
    steps:
    - delete: =BUILD_DIR
    - delete: '**/__pycache__'
      dir:    =NAME
    - delete:  '**/*.pyc'
      exclude: '={VENV_DIR}/**/*.pyc'
