# NeON Build File (http://github.com/c4s4/neon)

doc: Build file for Go projects
default: [check, test]

extends:
- c4s4/build/buildir.yml
- c4s4/build/changelog.yml
- c4s4/build/git.yml
- c4s4/build/archive.yml

properties:
  CYCLOMAX: '15'
  ARCHIVE:  '={BUILD_DIR}/={NAME}-={VERSION}.tar.gz'
  ARC_FILES:
  - files: ['README.md', 'CHANGELOG.yml', 'LICENSE.txt']
  - {files: 'bin/*', dir: =BUILD_DIR}
  LIBRARIES: []
  GOTOOLS:
  # cross compilation
  - github.com/mitchellh/gox
  # check tools
  - github.com/fzipp/gocyclo
  - golang.org/x/lint/golint
  - github.com/gordonklaus/ineffassign
  - github.com/client9/misspell/cmd/misspell
  # vscode tools
  - github.com/nsf/gocode
  - github.com/uudashr/gopkgs/cmd/gopkgs
  - github.com/ramya-rao-a/go-outline
  - github.com/acroca/go-symbols
  - golang.org/x/tools/cmd/guru
  - golang.org/x/tools/cmd/gorename
  - github.com/rogpeppe/godef
  - golang.org/x/tools/cmd/godoc
  - github.com/sqs/goreturns
  - github.com/derekparker/delve/cmd/dlv
  TEST_CASES: []
  TEST_OPTS:  []
  RUN_ARGS:   []

targets:

  tools:
    doc: Install tools
    steps:
    - for: 'tool'
      in:  'GOTOOLS'
      do:
      - print: 'Getting tool ={tool}'
      - $: ['go', 'get', '-u', =tool]

  libs:
    doc: Install libraries
    steps:
    - for: 'library'
      in:  'LIBRARIES'
      do:
      - print: 'Getting library ={library}'
      - $: ['go', 'get', '-u', =library]

  fmt:
    doc: Format Go code
    steps:
    - $: ['gofmt', '-s', '-w', '.']

  test:
    doc: Run Go tests
    steps:
    - if: 'len(TEST_CASES) == 0'
      then:
      - 'TEST_CASES = ["./..."]'
    - $: ['go', 'test', '-cover']
      +: =TEST_OPTS+TEST_CASES

  run:
    doc: Run Go tool
    steps:
    - $: ['go', 'run', '={NAME}.go']
      +: =RUN_ARGS

  bin:
    doc: Build binary for current platform
    steps:
    - mkdir: =BUILD_DIR
    - $: ['go', 'build', '-o', '={BUILD_DIR}/={NAME}']
  
  install:
    doc: Build and install binary for current platform
    steps:
    - $: ['go', 'install']
  
  binaries:
    doc: Make binaries for all platforms
    steps:
    - mkdir: '={BUILD_DIR}/bin'
    - $: ['gox', '-output=={BUILD_DIR}/bin/{{.Dir}}-{{.OS}}-{{.Arch}}']

  archive:
    doc: Build distribution archive
    depends: binaries
    steps:
    - super:

  release:
    doc: Perform a release
    depends: [clean, check, test, archive]
    steps:
    - super:

  check:
    doc: Check code with tools
    depends:
    - _check-fmt
    - _check-vet
    - _check-cyclo
    - _check-lint
    - _check-assign
    - _check-spell

  _check-fmt:
    doc: Check code with fmt tool
    steps:
    - $:  ['gofmt', '-l', '.']
      3=: errors
    - if: len(errors) > 0
      then:
      - print: '={"- "+join(split(errors, "\n"), "\n- ")}'
      - throw: 'Fmt check failure'
      else:
      - print: 'Fmt check OK'

  _check-vet:
    doc: Check code with vet tool
    steps:
    - try:
      - $: ['go', 'vet']
      - print: 'Vet check OK'
      catch:
      - throw: 'Vet check failure'

  _check-cyclo:
    doc: Check code with gocyclo tool
    steps:
    - try:
      - $: ['gocyclo', '-over', '={CYCLOMAX}', '.']
      - print: 'Cyclo check OK'
      catch:
      - throw: 'Cyclo check failure'

  _check-lint:
    doc: Check code with golint tool
    steps:
    - $:  ['golint', './...']
      3=: errors
    - if: len(errors) > 0
      then:
      - print: '={"- "+join(split(errors, "\n"), "\n- ")}'
      - throw: 'Lint check failure'
      else:
      - print: 'Lint check OK'

  _check-assign:
    doc: Check code with ineffassign tool
    steps:
    - try:
      - $: ['ineffassign', '.']
      - print: 'Assign check OK'
      catch:
      - throw: 'Assign check failure'

  _check-spell:
    doc: Check code with misspell tool
    steps:
    - 'files = find(".", "**/*.go")'
    - $:  ['misspell']
      +:  =files
      3=: errors
    - if: len(errors) > 0
      then:
      - print: '={"- "+join(split(errors, "\n"), "\n- ")}'
      - throw: 'Spell check failure'
      else:
      - print: 'Spell check OK'
