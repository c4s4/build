# NeON Build File (http://github.com/c4s4/neon)

doc: Build file for Go projects
default: [check, test]

extends: _archive

properties:
  VERSION_PATH: 'main.Version'
  CYCLOMAX:     '15'
  WEB_HOME:     'casa@sweetohm.net:/home/web/dist/={NAME}'
  ARC_FILES:
  - files: ['README.md', 'CHANGELOG.yml', 'LICENSE.txt']
  - {files: 'bin/*', dir: =BUILD_DIR}
  GOTOOLS:
  # cross compilation
  - github.com/mitchellh/gox
  # github tools
  - github.com/itchio/gothub
  # check tools
  - github.com/fzipp/gocyclo
  - golang.org/x/lint/golint
  - github.com/gordonklaus/ineffassign
  - github.com/client9/misspell/cmd/misspell
  # vscode tools
  - github.com/acroca/go-symbols
  - github.com/cweill/gotests/...
  - github.com/davidrjenni/reftools/cmd/fillstruct
  - github.com/fatih/gomodifytags
  - github.com/go-delve/delve/cmd/dlv
  - github.com/godoctor/godoctor
  - github.com/haya14busa/goplay/cmd/goplay
  - github.com/josharian/impl
  - github.com/mdempsky/gocode
  - github.com/ramya-rao-a/go-outline
  - github.com/rogpeppe/godef
  - github.com/sqs/goreturns
  - github.com/stamblerre/gocode
  - github.com/uudashr/gopkgs/cmd/gopkgs
  - golang.org/x/tools/cmd/gorename
  - golang.org/x/tools/cmd/guru
  - golang.org/x/tools/gopls
  #- github.com/rogpeppe/godef
  TEST_CASES:  []
  TEST_OPTS:   ['-v', '-cover']
  RUN_ARGS:    []
  PACKAGE:     './...'
  PACKAGE_DIR: '.'

targets:

  tools:
    doc: Install tools
    steps:
    - 'gotools = env("GOTOOLS"); if gotools == "" { gotools = env("GOPATH") }'
    - for: 'tool'
      in:  'GOTOOLS'
      do:
      - print: 'Getting tool ={tool}'
      - $: 'GOPATH=={gotools} GO111MODULE=off go get -u ={tool}'

  fmt:
    doc: Format Go code
    steps:
    - print: 'Formatting Go source files'
    - $: ['gofmt', '-s', '-w', =PACKAGE_DIR]

  test:
    doc: Run Go tests
    steps:
    - if: 'len(TEST_CASES) == 0'
      then:
      - 'TEST_CASES = [PACKAGE]'
    - $: ['go', 'test']
      +: =TEST_OPTS+TEST_CASES

  clean:
    doc: Clean build directory and Go test cache
    steps:
    - super:
    - $: ['go', 'clean', '-testcache']

  build:
    doc: Build binary for current platform
    depends: version
    steps:
    - mkdir: =BUILD_DIR
    - print: 'Generating binary in ={BUILD_DIR}/={NAME}'
    - if: 'defined("VERSION_PATH") && VERSION_PATH != nil'
      then:
      - $: ['go', 'build', '-o', '={BUILD_DIR}',
            '-ldflags', '-X ={VERSION_PATH}=={VERSION} -s -f',
            =PACKAGE]
      else:
      - $: ['go', 'build', '-o', '={BUILD_DIR}',
            '-ldflags', '-s -f', =PACKAGE]

  binaries:
    doc: Make binaries for all platforms
    depends: version
    steps:
    - $:  'go tool dist list | grep -v android | grep -v dragonfly | grep -v plan9 | grep -v solaris'
      1=: GOOSARCH
      3x:
    - 'GOOSARCH = replace(GOOSARCH, "\n", " ")'
    - mkdir: '={BUILD_DIR}/bin'
    - if: 'defined("VERSION_PATH") && VERSION_PATH != nil'
      then:
      - $: ['gox', '-ldflags', '-X ={VERSION_PATH}=={VERSION} -s -f',
            '-osarch="={GOOSARCH}"',
            '-output=={BUILD_DIR}/bin/{{.Dir}}-{{.OS}}-{{.Arch}}',
            =PACKAGE]
      else:
      - $: ['gox', '-output=={BUILD_DIR}/bin/{{.Dir}}-{{.OS}}-{{.Arch}}',
            '-osarch="={GOOSARCH}"', '-ldflags', '-s -f', =PACKAGE]

  install:
    doc: Build and install binary in GOPATH
    steps:
    - 'path = joinpath(split(env("GOPATH"), ":")[0], "bin")'
    - print: 'Building and installing binary in ={path}'
    - $: ['go', 'build', '-o', =path, '-ldflags', '-s -f', =PACKAGE]

  run:
    doc: Run Go tool
    depends: build
    steps:
    - $: ['={BUILD_DIR}/={NAME}']
      +: =RUN_ARGS

  archive:
    doc: Build distribution archive
    depends: [version, binaries]
    steps:
    - super:

  deploy:
    doc: Deploy installation script and binaries
    depends: binaries
    steps:
    - print: 'Deploying dotrun binaries...'
    - $: ['scp', 'install', =WEB_HOME]
    - 'binaries = join(find(".", BUILD_DIR+"/bin/*"), " ")'
    - $: 'scp ={binaries} ={WEB_HOME}'

  release:
    doc: Perform a release
    depends: [clean, check, test, archive, deploy]
    steps:
    - super:

  check:
    doc: Check code with tools
    depends:
    - _check-fmt
    - _check-vet
    - _check-cyclo
    - _check-lint
    - _check-assign
    - _check-spell
    steps:
    - print: 'All checks OK'

  _check-fmt:
    doc: Check code with fmt tool
    steps:
    - $:  ['gofmt', '-l', =PACKAGE_DIR]
      3=: errors
    - if: len(errors) > 0
      then:
      - print: '={"- "+join(split(errors, "\n"), "\n- ")}'
      - throw: 'Fmt check failure'
      else:
      - print: 'Fmt check OK'

  _check-vet:
    doc: Check code with vet tool
    steps:
    - try:
      - $: ['go', 'vet', =PACKAGE]
      - print: 'Vet check OK'
      catch:
      - throw: 'Vet check failure'

  _check-cyclo:
    doc: Check code with gocyclo tool
    steps:
    - try:
      - $: ['gocyclo', '-over', '={CYCLOMAX}', =PACKAGE_DIR]
      - print: 'Cyclo check OK'
      catch:
      - throw: 'Cyclo check failure'

  _check-lint:
    doc: Check code with golint tool
    steps:
    - $:  ['golint', =PACKAGE]
      3=: errors
    - if: len(errors) > 0
      then:
      - print: '={"- "+join(split(errors, "\n"), "\n- ")}'
      - throw: 'Lint check failure'
      else:
      - print: 'Lint check OK'

  _check-assign:
    doc: Check code with ineffassign tool
    steps:
    - try:
      - $: ['ineffassign', =PACKAGE_DIR]
      - print: 'Assign check OK'
      catch:
      - throw: 'Assign check failure'

  _check-spell:
    doc: Check code with misspell tool
    steps:
    - 'files = find(PACKAGE_DIR, "**/*.go")'
    - $:  ['misspell']
      +:  =files
      3=: errors
    - if: len(errors) > 0
      then:
      - print: '={"- "+join(split(errors, "\n"), "\n- ")}'
      - throw: 'Spell check failure'
      else:
      - print: 'Spell check OK'
